CodeGuardian Hackathon Project Plan
1️⃣ Project Overview

Project Name: CodeGuardian: The Autonomous AI DevSecOps Agent

Goal:
Build an autonomous AI agent that can:

Analyze code files or repos

Detect security vulnerabilities and bad coding practices

Explain the issues in plain English

Suggest or generate safe fixes

Expected Behavior of the Agent:

User uploads a code file or points to a GitHub repo.

Agent scans the code and retrieves knowledge from its internal security knowledge base (OWASP Top 10, best practices).

Agent reasons using Llama-3 1-nemotron-nano-8B-v1 (NVIDIA NIM).

Outputs a report:

Vulnerabilities found

Explanation of why it’s a risk

Suggested or generated fix

Optional: Visualize before/after code diffs in UI.

Hackathon Requirements Fulfilled:

Uses Llama-3 NIM (reasoning model) ✅

Uses Retrieval Embedding NIM (knowledge lookup) ✅

Deployable on AWS SageMaker or EKS (optional, demoable locally) ✅

Full-stack AI project with real-world application ✅

2️⃣ Core Features
Feature	Description
Code Upload	Users can upload .py, .js, .java files or GitHub repo URLs
Vulnerability Detection	Detect hardcoded secrets, SQL injection, unsafe input handling, etc.
Explanation	AI explains why the code is vulnerable in plain language
Auto-Fix Suggestions	Generates safer replacement code
Retrieval Knowledge	Embeds best practices/security rules using NVIDIA Embedding NIM
Dashboard	Streamlit UI showing input, vulnerabilities, fixes, and reasoning
Autonomous Behavior	Can self-reflect or verify if suggested fixes would solve the issue
3️⃣ Technologies & Tools
Layer	Technology	Purpose
AI Reasoning	Llama-3 1-nemotron-nano-8B-v1 via NVIDIA NIM	Analyze code, reason about vulnerabilities
Retrieval	Retrieval Embedding NIM	Store and fetch security best-practices knowledge
Backend	Python (FastAPI or Flask)	Handle file uploads, integrate NIM models
Frontend	Streamlit	Quick, interactive web UI for demo
Vector Store	FAISS / SQLite / JSON	Store embeddings for security knowledge
Deployment	AWS SageMaker endpoint (optional) / local	Host inference API
Code Parsing	Regex, Bandit, Semgrep	Detect patterns, support AI reasoning
Version Control	GitHub	Repo storage, submission, tracking
Mock Data	JSON files	Simulate GitHub repo or AWS inputs if needed
Optional Hosting	Streamlit Cloud / Render free-tier	Demo the app online

Hardware:

Local machine (8–16GB RAM, any CPU, GPU not required)

NVIDIA NIM handles inference remotely → no local GPU needed

Budget:

$0 required. Use hackathon $100 credits only if you want SageMaker deployment.

4️⃣ Architecture (Simplified)
[User Upload / GitHub Repo]
          │
          ▼
   [Backend Server: FastAPI]
          │
          ▼
[Code Parsing + Pattern Detection]
          │
          ▼
[Retrieval Embedding NIM] ---> [Security Knowledge Base / FAISS]
          │
          ▼
[Llama-3 NIM Reasoning]
          │
          ▼
[Fix Suggestions + Explanation]
          │
          ▼
[Frontend: Streamlit UI]


Flow Explanation:

Backend receives code.

Code parsed for patterns → basic checks.

Retrieval NIM fetches relevant security rules.

Llama-3 reasons over patterns + rules → outputs vulnerability + explanation + fix.

Streamlit dashboard shows results visually.

5️⃣ Mock Data Examples

JSON structure for knowledge base:

[
  {
    "pattern": "hardcoded AWS key",
    "description": "Storing secrets in code is unsafe.",
    "fix": "Use environment variables instead."
  },
  {
    "pattern": "SQL query concatenation",
    "description": "Direct string concatenation can cause SQL injection.",
    "fix": "Use parameterized queries."
  }
]


Example code upload input:

Python script with hardcoded API keys

JS code with unsafe input handling

Agent Output Example:

Issue: Hardcoded API key detected in config.py
Explanation: Secrets in code can leak if repo is public.
Suggested Fix: Store keys in environment variables.

6️⃣ Step-by-Step Build Plan (Solo-Friendly, ~12 Days)
Day	Task
1	Register hackathon, apply for NVIDIA/AWS credits
2	Setup Python project, install FastAPI, Streamlit
3	Integrate Retrieval Embedding NIM → create small local knowledge base
4	Integrate Llama-3 NIM inference → basic reasoning on single code snippet
5	Implement code parsing + pattern detection using regex/Bandit
6	Combine code parsing + retrieval + reasoning → single workflow
7	Build Streamlit UI → upload + results display
8	Add auto-fix suggestion feature → show code diffs
9	Polish reasoning outputs → make explanations human-readable
10	Test on multiple code files / small repos → refine pipeline
11	Record demo video (<3 min)
12	Write README + Devpost submission + architecture diagram
7️⃣ Submission Plan for Devpost
Item	Notes
Project Name	CodeGuardian: The Autonomous AI DevSecOps Agent
Elevator Pitch	"Autonomous AI agent that detects, explains, and fixes code vulnerabilities — making DevOps smarter and safer."
Demo Video	Show upload → detection → explanation → fix
Public Code Repo	GitHub repo with /backend, /frontend, /docs
README	Include instructions for local run + optional AWS deployment
Architecture Diagram	Include the simplified diagram above
Features Highlight	Emphasize agent autonomy, retrieval + reasoning, real-world DevOps impact
8️⃣ Tips to Impress Judges

Show step-by-step reasoning of AI in demo (not just input/output).

Highlight retrieval + reasoning combination → agent is not “just a script”.

Emphasize real-world impact → reduces DevOps risks, automates security.

Keep UI clean, responsive, and simple.

Optional: show mock GitHub PR creation to wow the automation part.

9️⃣ Free & Solo-Friendly Strategy

Run everything locally → no AWS billing.

Use mock code or small open-source repos → demonstrates real use case.

Use NVIDIA NIM sandbox for inference → no local GPU required.

Optional deployment: Streamlit Cloud free-tier → live demo URL for judges.

✅ End Result:

A fully functioning, autonomous AI agent that judges can see:

It thinks

It retrieves knowledge

It detects and fixes vulnerabilities

It’s fully agentic, impactful, and visually appealing.